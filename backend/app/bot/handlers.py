import logging

from aiogram import Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from .api import BooksPortalAPI
from .keyboards import (
    get_book_actions_keyboard,
    get_main_keyboard,
    get_pagination_keyboard,
    get_rating_keyboard,
)
from .states import SearchBooks

logger = logging.getLogger(__name__)
router = Router()


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(start_command, Command(commands=["start"]))
    dp.message.register(help_command, Command(commands=["help"]))
    dp.message.register(search_books_command, Command(commands=["search"]))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(process_search_query, SearchBooks.waiting_for_query)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    dp.message.register(show_catalog, lambda msg: msg.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
    dp.message.register(search_books_command, lambda msg: msg.text == "üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥")
    dp.message.register(show_link_account, lambda msg: msg.text == "üë§ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.callback_query.register(process_link_account, F.data == "link_account")
    dp.callback_query.register(
        process_book_action,
        F.data.startswith(("book_authors_", "similar_books_", "book_details_", "rate_book_", "add_favorite_")),
    )
    dp.callback_query.register(process_pagination, F.data.endswith(("_page_")))


async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Books Portal Bot! üìö\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∫–Ω–∏–≥–∏\n"
        "‚Ä¢ üìö –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n"
        "‚Ä¢ üìñ –ß–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –æ—Ü–µ–Ω–∫–∏) "
        "–ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å —Å–∞–π—Ç–∞ Books Portal.",
        reply_markup=get_main_keyboard(),
    )


async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/search - –ü–æ–∏—Å–∫ –∫–Ω–∏–≥\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ - –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É\n"
        "‚Ä¢ üìö –ö–∞—Ç–∞–ª–æ–≥ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–Ω–∏–≥\n"
        "‚Ä¢ üìñ –û–ø–∏—Å–∞–Ω–∏—è - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–∞—Ö\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
        "‚Ä¢ üìö –ú–æ–∏ –∫–Ω–∏–≥–∏ - –≤–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞\n"
        "‚Ä¢ üìñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ ‚≠ê –û—Ü–µ–Ω–∫–∏ - –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥\n"
        "‚Ä¢ ‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏\n\n"
        "–ü—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Å–∞–π—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!"
    )
    await message.answer(help_text)


async def process_link_account(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.answer(
        "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç Books Portal:\n"
        "http://localhost:3000\n\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\n"
        "3. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n"
        "4. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: " + str(callback.from_user.id) + "\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!"
    )
    await callback.answer()


async def search_books_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchBooks.waiting_for_query)


async def process_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    try:
        async with BooksPortalAPI() as api:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–∏–≥
            results = await api.search_books(query=query, page=1, limit=3)

            if not results or not results.get("items"):
                await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(search_query=query)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            response = "üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
            for i, book in enumerate(results["items"], 1):
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
                authors = await api.get_book_authors(book["id"])
                authors_str = ", ".join([author["name"] for author in authors]) if authors else "–ù–µ —É–∫–∞–∑–∞–Ω"

                response += (
                    f"{i}. üìñ {book['title']}\n"
                    f"   üë§ –ê–≤—Ç–æ—Ä—ã: {authors_str}\n"
                    f"   üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([cat['name_categories'] for cat in book.get('categories', [])]) if book.get('categories') else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
                    f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {book.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100]}...\n\n"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if results["total"] > results["size"]:
                total_pages = (results["total"] + results["size"] - 1) // results["size"]
                keyboard = get_pagination_keyboard(1, total_pages, "search")
                await message.answer(response, reply_markup=keyboard)
            else:
                await message.answer(response)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
            for book in results["items"]:
                keyboard = get_book_actions_keyboard(book["id"])
                await message.answer(f"–î–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–∏–≥–æ–π '{book['title']}':", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error during search: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


async def show_catalog(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥"""
    try:
        async with BooksPortalAPI() as api:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–∏–≥
            books = await api.get_catalog(page=1, limit=3)

            if not books or not isinstance(books, dict) or not books.get("items"):
                await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = "üìö –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥:\n\n"
            for i, book in enumerate(books["items"], 1):
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
                authors = await api.get_book_authors(book["id"])
                authors_str = ", ".join([author["name"] for author in authors]) if authors else "–ù–µ —É–∫–∞–∑–∞–Ω"

                response += (
                    f"{i}. üìñ {book['title']}\n"
                    f"   üë§ –ê–≤—Ç–æ—Ä—ã: {authors_str}\n"
                    f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {book.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100]}...\n\n"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            total_pages = (books["total"] + 2) // 3  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
            keyboard = get_pagination_keyboard(1, total_pages, "catalog")

            await message.answer(response, reply_markup=keyboard)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
            for book in books["items"]:
                keyboard = get_book_actions_keyboard(book["id"])
                await message.answer(f"–î–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–∏–≥–æ–π '{book['title']}':", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error getting catalog: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_link_account(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        async with BooksPortalAPI() as api:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
            user_info = await api.get_user_info(message.from_user.id)
            if user_info and user_info.get("telegram_id") == message.from_user.id:
                await message.answer(
                    "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
                    "‚Ä¢ üìö –ú–æ–∏ –∫–Ω–∏–≥–∏\n"
                    "‚Ä¢ üìñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                    "‚Ä¢ ‚≠ê –û—Ü–µ–Ω–∫–∏\n"
                    "‚Ä¢ ‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
                )
                return
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω

    await message.answer(
        "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç Books Portal:\n"
        "http://localhost:8000\n\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\n"
        "3. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n"
        "4. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: " + str(message.from_user.id) + "\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!"
    )


async def process_book_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–∏–≥–æ–π"""
    try:
        action, book_id = callback.data.split("_", 1)
        book_id = int(book_id)

        async with BooksPortalAPI() as api:
            if action == "book_details":
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
                book = await api.get_book_details(book_id)
                authors = await api.get_book_authors(book_id)
                authors_str = ", ".join([author["name"] for author in authors]) if authors else "–ù–µ —É–∫–∞–∑–∞–Ω"

                response = (
                    f"üìñ {book['title']}\n\n"
                    f"üë§ –ê–≤—Ç–æ—Ä—ã: {authors_str}\n"
                    f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([cat['name_categories'] for cat in book.get('categories', [])]) if book.get('categories') else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {book.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                )
                await callback.message.answer(response)

            elif action == "book_authors":
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
                authors = await api.get_book_authors(book_id)
                if authors:
                    response = "üë§ –ê–≤—Ç–æ—Ä—ã –∫–Ω–∏–≥–∏:\n\n"
                    for author in authors:
                        response += f"‚Ä¢ {author['name']}\n"
                else:
                    response = "–ê–≤—Ç–æ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                await callback.message.answer(response)

            elif action == "similar_books":
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–Ω–∏–≥–∏
                similar_books = await api.get_similar_books(book_id)
                if similar_books:
                    response = "üìö –ü–æ—Ö–æ–∂–∏–µ –∫–Ω–∏–≥–∏:\n\n"
                    for i, book in enumerate(similar_books, 1):
                        response += f"{i}. {book['title']}\n"
                else:
                    response = "–ü–æ—Ö–æ–∂–∏–µ –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                await callback.message.answer(response)

            elif action == "rate_book":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                keyboard = get_rating_keyboard(book_id)
                await callback.message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=keyboard)

            elif action == "add_favorite":
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                result = await api.toggle_favorite(book_id)
                if result.get("is_favorite"):
                    await callback.message.answer("‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
                else:
                    await callback.message.answer("‚ùå –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

    except Exception as e:
        logger.error(f"Error processing book action: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer()


async def process_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    action, page = callback.data.split("_page_")
    page = int(page)

    try:
        async with BooksPortalAPI() as api:
            if action == "search":
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                data = await state.get_data()
                query = data.get("search_query", "")

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                results = await api.search_books(query=query, page=page, limit=3)
                response = "üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
                for i, book in enumerate(results["items"], 1):
                    response += (
                        f"{i}. üìñ {book['title']}\n"
                        f"   üë§ –ê–≤—Ç–æ—Ä: {book.get('author', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n\n"
                    )
                total_pages = (results["total"] + 2) // 3
            elif action == "catalog":
                # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                books = await api.get_catalog(page=page, limit=3)
                response = "üìö –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥:\n\n"
                for i, book in enumerate(books["items"], 1):
                    response += (
                        f"{i}. üìñ {book['title']}\n"
                        f"   üë§ –ê–≤—Ç–æ—Ä: {book.get('author', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n\n"
                    )
                total_pages = (books["total"] + 2) // 3

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            keyboard = get_pagination_keyboard(page, total_pages, action)

            await callback.message.edit_text(response, reply_markup=keyboard)

    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")

    await callback.answer()
