"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.
"""

from aiogram import Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.core.logger_config import logger

from .api import BooksPortalAPI
from .keyboards import (
    get_authors_keyboard,
    get_books_keyboard,
    get_categories_keyboard,
    get_main_menu_keyboard,
    get_rating_keyboard,
)
from .states import BookSearch

router = Router()


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(start_command, Command(commands=["start"]))
    dp.message.register(help_command, Command(commands=["help"]))
    dp.message.register(search_books_command, Command(commands=["search"]))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(process_search_query, BookSearch.waiting_for_query)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    dp.message.register(search_books_command, F.text == "üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥")
    dp.message.register(get_recommendations, F.text == "üìñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    dp.message.register(show_categories, F.text == "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    dp.message.register(show_authors, F.text == "üë• –ê–≤—Ç–æ—Ä—ã")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.callback_query.register(process_book_callback, F.data.startswith("book_"))
    dp.callback_query.register(process_category_callback, F.data.startswith("category_"))
    dp.callback_query.register(process_author_callback, F.data.startswith("author_"))
    dp.callback_query.register(process_rating_callback, F.data.startswith("rate_"))
    dp.callback_query.register(process_pagination, F.data.startswith("books_page_"))

    dp.include_router(router)


async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Books Portal! üìö\n" "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
            reply_markup=get_main_menu_keyboard(),
        )
        logger.info(f"User {message.from_user.id} started the bot")
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/search - –ü–æ–∏—Å–∫ –∫–Ω–∏–≥\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ - –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É\n"
        "‚Ä¢ üìñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "‚Ä¢ üë• –ê–≤—Ç–æ—Ä—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ—Ä–æ–≤\n\n"
        "–î–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ ‚≠ê"
    )
    await message.answer(help_text, reply_markup=get_main_menu_keyboard())


async def search_books_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.set_state(BookSearch.waiting_for_query)
    except Exception as e:
        logger.error(f"Error in search command: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        query = message.text.strip()
        if not query:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return

        async with BooksPortalAPI() as api:
            results = await api.search_books(query=query, page=1, limit=5)

            if not results or not results.get("items"):
                await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            response = "üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
            for book in results["items"]:
                response += (
                    f"üìñ {book['title']}\n"
                    f"üë§ –ê–≤—Ç–æ—Ä—ã: {', '.join([author['name'] for author in book.get('authors', [])])}\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n\n"
                )

            keyboard = get_books_keyboard(results["items"])
            await message.answer(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error during search: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()


async def get_recommendations(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    try:
        async with BooksPortalAPI() as api:
            recommendations = await api.get_recommendations(limit=5)

            if not recommendations:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
                return

            response = "üìñ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–Ω–∏–≥–∏:\n\n"
            for book in recommendations:
                response += (
                    f"üìñ {book['title']}\n"
                    f"üë§ –ê–≤—Ç–æ—Ä—ã: {', '.join([author['name'] for author in book.get('authors', [])])}\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n\n"
                )

            keyboard = get_books_keyboard(recommendations)
            await message.answer(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error getting recommendations: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_categories(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        async with BooksPortalAPI() as api:
            categories = await api.get_categories()

            if not categories:
                await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
            for category in categories:
                response += f"‚Ä¢ {category['name']}\n"

            keyboard = get_categories_keyboard(categories)
            await message.answer(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error showing categories: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_authors(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∞–≤—Ç–æ—Ä–æ–≤"""
    try:
        async with BooksPortalAPI() as api:
            authors = await api.get_authors()

            if not authors:
                await message.answer("–ê–≤—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            response = "üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã:\n\n"
            for author in authors:
                response += f"‚Ä¢ {author['name']}\n"

            keyboard = get_authors_keyboard(authors)
            await message.answer(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error showing authors: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_book_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–∏–≥"""
    try:
        book_id = int(callback.data.split("_")[1])
        async with BooksPortalAPI() as api:
            book = await api.get_book(book_id)

            if not book:
                await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            response = (
                f"üìñ {book['title']}\n\n"
                f"üë§ –ê–≤—Ç–æ—Ä—ã: {', '.join([author['name'] for author in book.get('authors', [])])}\n"
                f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([cat['name'] for cat in book.get('categories', [])])}\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {book.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            )

            keyboard = get_rating_keyboard(book_id)
            await callback.message.answer(response, reply_markup=keyboard)
            await callback.answer()

    except Exception as e:
        logger.error(f"Error processing book callback: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_category_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        category_id = int(callback.data.split("_")[1])
        async with BooksPortalAPI() as api:
            books = await api.get_books_by_category(category_id, page=1, limit=5)

            if not books or not books.get("items"):
                await callback.answer("–ö–Ω–∏–≥–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            response = "üìö –ö–Ω–∏–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
            for book in books["items"]:
                response += (
                    f"üìñ {book['title']}\n"
                    f"üë§ –ê–≤—Ç–æ—Ä—ã: {', '.join([author['name'] for author in book.get('authors', [])])}\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n\n"
                )

            keyboard = get_books_keyboard(books["items"])
            await callback.message.answer(response, reply_markup=keyboard)
            await callback.answer()

    except Exception as e:
        logger.error(f"Error processing category callback: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_author_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤"""
    try:
        author_id = int(callback.data.split("_")[1])
        async with BooksPortalAPI() as api:
            books = await api.get_books_by_author(author_id, page=1, limit=5)

            if not books or not books.get("items"):
                await callback.answer("–ö–Ω–∏–≥–∏ —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            response = "üìö –ö–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞:\n\n"
            for book in books["items"]:
                response += f"üìñ {book['title']}\n" f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n\n"

            keyboard = get_books_keyboard(books["items"])
            await callback.message.answer(response, reply_markup=keyboard)
            await callback.answer()

    except Exception as e:
        logger.error(f"Error processing author callback: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_rating_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥"""
    try:
        _, book_id, rating = callback.data.split("_")
        book_id = int(book_id)
        rating = int(rating)

        async with BooksPortalAPI() as api:
            success = await api.rate_book(book_id, rating)

            if success:
                await callback.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating} ‚≠ê")
            else:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É.")

    except Exception as e:
        logger.error(f"Error processing rating callback: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.")


async def process_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        page = int(callback.data.split("_")[-1])
        async with BooksPortalAPI() as api:
            books = await api.get_books(page=page, limit=5)

            if not books or not books.get("items"):
                await callback.answer("–ë–æ–ª—å—à–µ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            response = f"üìö –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:\n\n"
            for book in books["items"]:
                response += (
                    f"üìñ {book['title']}\n"
                    f"üë§ –ê–≤—Ç–æ—Ä—ã: {', '.join([author['name'] for author in book.get('authors', [])])}\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n\n"
                )

            keyboard = get_books_keyboard(books["items"], page)
            await callback.message.edit_text(response, reply_markup=keyboard)
            await callback.answer()

    except Exception as e:
        logger.error(f"Error processing pagination: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
